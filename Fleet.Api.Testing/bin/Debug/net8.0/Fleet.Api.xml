<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Fleet.Api</name>
    </assembly>
    <members>
        <member name="T:Fleet.Api.Extensions.DbSetExtensions">
            <summary>
                Extension methods for DbSet to control change tracking behavior.
            </summary>
        </member>
        <member name="M:Fleet.Api.Extensions.DbSetExtensions.TrackChanges``1(Microsoft.EntityFrameworkCore.DbSet{``0},System.Boolean)">
            <summary>
                Configures change tracking for a DbSet based on the specified flag.
            </summary>
            <typeparam name="TSource">The type of entities in the DbSet, must inherit from BaseEntity.</typeparam>
            <param name="dbSet">The DbSet to configure change tracking for.</param>
            <param name="trackChanges">A boolean flag indicating whether to track changes or not.</param>
            <returns>
                An IQueryable that includes or excludes change tracking based on the provided flag.
            </returns>
        </member>
        <member name="T:Fleet.Api.Extensions.QueryableExtensions">
            <summary>
                Extension methods for DbSet to control change tracking behavior.
            </summary>
        </member>
        <member name="M:Fleet.Api.Features.Containers.Abstractions.IContainerRepository.Create(Fleet.Api.Entities.Container,System.Threading.CancellationToken)">
            <summary>
                Adds a new Container to the database asynchronously.
            </summary>
            <param name="container">The Container to be added.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:Fleet.Api.Features.Containers.Abstractions.IContainerRepository.Get(System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
                Retrieves a Container by its Id with optional change tracking.
            </summary>
            <param name="containerId">The Id of the Container to retrieve.</param>
            <param name="trackChanges">Indicates whether to track changes.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A task representing the asynchronous operation and the retrieved Container.</returns>
        </member>
        <member name="M:Fleet.Api.Features.Containers.Abstractions.IContainerRepository.Get(Fleet.Api.Shared.PaginationParams,System.Threading.CancellationToken)">
            <summary>
                Retrieves Containers with pagination support.
            </summary>
            <param name="paginationParams">Parameters for pagination.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A task representing the asynchronous operation and the paginated result of Containers.</returns>
        </member>
        <member name="M:Fleet.Api.Features.Containers.Abstractions.IContainerRepository.Remove(Fleet.Api.Entities.Container)">
            <summary>
                Removes a Container from the database.
            </summary>
            <param name="container">The Container to be removed.</param>
        </member>
        <member name="M:Fleet.Api.Features.Containers.Abstractions.IContainerRepository.IsNameUnique(System.String,System.Threading.CancellationToken)">
            <summary>
                Checks if a Container name is unique in the database.
            </summary>
            <param name="containerName">The name to check for uniqueness.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A task representing the asynchronous operation and a boolean indicating the uniqueness of the name.</returns>
        </member>
        <member name="M:Fleet.Api.Features.Containers.Abstractions.IContainerService.Create(Fleet.Api.Features.Containers.DTOs.CreateContainerRequest,System.Threading.CancellationToken)">
            <summary>
                Creates a new container based on the provided request.
            </summary>
            <param name="request">The request containing container data.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A result indicating the success and the Id of the created container.</returns>
        </member>
        <member name="M:Fleet.Api.Features.Containers.Abstractions.IContainerService.Get(System.Int32,System.Threading.CancellationToken)">
            <summary>
                Retrieves container details by Id.
            </summary>
            <param name="containerId">The Id of the container to retrieve.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A result indicating the success and the response containing container details.</returns>
        </member>
        <member name="M:Fleet.Api.Features.Containers.Abstractions.IContainerService.Get(Fleet.Api.Shared.PaginationParams,System.Threading.CancellationToken)">
            <summary>
                Retrieves a paginated list of containers.
            </summary>
            <param name="paginationParams">Parameters for pagination.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A result indicating the success and the paginated response of container details.</returns>
        </member>
        <member name="M:Fleet.Api.Features.Containers.Abstractions.IContainerService.Delete(System.Int32,System.Threading.CancellationToken)">
            <summary>
                Deletes a container by Id.
            </summary>
            <param name="containerId">The Id of the container to delete.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A result indicating the success of the deletion operation.</returns>
        </member>
        <member name="M:Fleet.Api.Features.Containers.ContainersController.Create(Fleet.Api.Features.Containers.DTOs.CreateContainerRequest,System.Threading.CancellationToken)">
            <summary>
                Creates a new container with the provided name.
            </summary>
            <response code="201">Returns the Id of the newly created Container</response>
            <response code="400">
                When:
                <ul>
                    <li>the [Name] is null or empty</li>
                    <li>the [Name] is exceeds 100 characters</li>
                    <li>the [Name] is already taken</li>
                </ul>
            </response>
        </member>
        <member name="M:Fleet.Api.Features.Containers.ContainersController.Get(System.Int32,System.Threading.CancellationToken)">
            <summary>
                Retrieves the container with the specified Id.
            </summary>
            <response code="200">Returns the container instance of the specified Id</response>
            <response code="404">
                If the container does not exists
            </response>
        </member>
        <member name="M:Fleet.Api.Features.Containers.ContainersController.Get(Fleet.Api.Shared.PaginationParams,System.Threading.CancellationToken)">
            <summary>
                Retrieves a paginated list of containers.
            </summary>
            <param name="paginationParams">Pagination parameters.</param>
            <param name="ct">Cancellation token.</param>
            <response code="200">Returns the paginated list of containers</response>
        </member>
        <member name="M:Fleet.Api.Features.Containers.ContainersController.Delete(System.Int32,System.Threading.CancellationToken)">
            <summary>
                Deletes a container by its identifier.
            </summary>
            <param name="containerId">The unique identifier of the container to delete.</param>
            <param name="ct">Cancellation token.</param>
            <response code="200">Returns a success response upon successful deletion.</response>
            <response code="404">If the container does not exist</response>
            <response code="404">If the container is loaded in either a truck or a ship</response>
        </member>
        <member name="P:Fleet.Api.Features.Containers.DTOs.CreateContainerRequest.Name">
            <summary>
                The name of the container
            </summary>
        </member>
        <member name="T:Fleet.Api.Features.Containers.Implementations.ContainerRepository">
            <summary>
                Repository for handling Container entities in the database.
            </summary>
        </member>
        <member name="M:Fleet.Api.Features.Containers.Implementations.ContainerRepository.#ctor(Fleet.Api.Database.ApplicationDbContext)">
            <summary>
                Initializes a new instance of the ContainerRepository class.
            </summary>
            <param name="db">The application database context.</param>
        </member>
        <member name="T:Fleet.Api.Features.Containers.Implementations.ContainerService">
            <summary>
                Service for managing Container entities and handling related operations.
            </summary>
        </member>
        <member name="F:Fleet.Api.Features.Containers.Implementations.ContainerService.ContainerNameMaximumLength">
            <summary>
                Maximum length allowed for a container name.
            </summary>
        </member>
        <member name="M:Fleet.Api.Features.Containers.Implementations.ContainerService.#ctor(Fleet.Api.Features.Containers.Abstractions.IContainerRepository,Fleet.Api.Features.Ships.Abstractions.IShipContainerRepository,Fleet.Api.Features.Trucks.Abstractions.ITruckContainerRepository,Fleet.Api.Infrastructure.IUnitOfWork,AutoMapper.IMapper)">
            <summary>
                Initializes a new instance of the ContainerService class.
            </summary>
            <param name="containerRepository">Repository for container data access.</param>
            <param name="shipContainerRepository">Repository for ship container data access.</param>
            <param name="truckContainerRepository">Repository for truck container data access.</param>
            <param name="unitOfWork">Unit of Work for managing transactions.</param>
            <param name="mapper">Mapper for DTO transformations.</param>
        </member>
        <member name="M:Fleet.Api.Features.Containers.Implementations.ContainerService.Create(Fleet.Api.Features.Containers.DTOs.CreateContainerRequest,System.Threading.CancellationToken)">
            <summary>
                Creates a new container based on the provided request.
            </summary>
            <param name="request">The request containing container data.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A result indicating the success or failure of the create operation.</returns>
        </member>
        <member name="M:Fleet.Api.Features.Containers.Implementations.ContainerService.Get(System.Int32,System.Threading.CancellationToken)">
            <summary>
                Gets details of a specific container by its Id.
            </summary>
            <param name="containerId">The Id of the container.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A result containing the container details or an error if not found.</returns>
        </member>
        <member name="M:Fleet.Api.Features.Containers.Implementations.ContainerService.Get(Fleet.Api.Shared.PaginationParams,System.Threading.CancellationToken)">
            <summary>
                Gets a paginated list of containers based on the provided parameters.
            </summary>
            <param name="paginationParams">Pagination parameters.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A result containing the paginated list of containers or an error if encountered.</returns>
        </member>
        <member name="M:Fleet.Api.Features.Containers.Implementations.ContainerService.Delete(System.Int32,System.Threading.CancellationToken)">
            <summary>
                Deletes a container by its Id.
            </summary>
            <param name="containerId">The Id of the container to delete.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A result indicating the success or failure of the delete operation.</returns>
        </member>
        <member name="M:Fleet.Api.Features.Containers.Implementations.ContainerService.ValidateCreateRequest(Fleet.Api.Features.Containers.DTOs.CreateContainerRequest,System.Threading.CancellationToken)">
            <summary>
                Validates the create container request.
            </summary>
            <param name="request">The request containing container data.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A result indicating the success or failure of the validation.</returns>
        </member>
        <member name="M:Fleet.Api.Features.Ships.Abstractions.IShipContainerRepository.Create(Fleet.Api.Entities.ShipContainer,System.Threading.CancellationToken)">
            <summary>
                Adds a new Ship Container to the database asynchronously.
            </summary>
            <param name="shipContainer">The Ship Container to be added.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:Fleet.Api.Features.Ships.Abstractions.IShipContainerRepository.CountContainersByShipId(System.Int32,System.Threading.CancellationToken)">
            <summary>
                Retrieves the Ship Containers of the provided shipId from the database asynchronously.
            </summary>
            <param name="shipId">The Ship to have its containers fetched.</param>
            <param name="ct">Cancellation token.</param>
            <returns>
                A task representing the asynchronous operation containing a list of the
                containers that are loaded on the provided shipId.
            </returns>
        </member>
        <member name="M:Fleet.Api.Features.Ships.Abstractions.IShipContainerRepository.Get(System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
                Retrieves the Ship Container based on the provided containerId
            </summary>
            <param name="containerId">The Id of the Container to be searched.</param>
            <param name="trackChanges">Indicates whether to track changes.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A task representing the asynchronous operation including the Ship Container (if found).</returns>
        </member>
        <member name="M:Fleet.Api.Features.Ships.Abstractions.IShipContainerRepository.Remove(Fleet.Api.Entities.ShipContainer)">
            <summary>
                Removes a Ship Container from the database.
            </summary>
            <param name="shipContainer">The Ship Container to be removed.</param>
        </member>
        <member name="M:Fleet.Api.Features.Ships.Abstractions.IShipContainerService.Load(System.Int32,Fleet.Api.Features.Ships.DTOs.LoadShipRequest,System.Threading.CancellationToken)">
            <summary>
                Loads an existing ship with the provided container.
            </summary>
            <param name="shipId">The ship Id to have the provided container loaded.</param>
            <param name="request">The request containing container data.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A result indicating the success regarding the load operation.</returns>
        </member>
        <member name="M:Fleet.Api.Features.Ships.Abstractions.IShipContainerService.Unload(System.Int32,Fleet.Api.Features.Ships.DTOs.UnloadShipRequest,System.Threading.CancellationToken)">
            <summary>
                Unloads the provided container from an existing ship.
            </summary>
            <param name="shipId">The ship Id to have the provided container unloaded.</param>
            <param name="request">The request containing container data.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A result indicating the success regarding the unload operation.</returns>
        </member>
        <member name="M:Fleet.Api.Features.Ships.Abstractions.IShipContainerService.Transfer(System.Int32,System.Int32,Fleet.Api.Shared.Requests.TransferContainerRequest,System.Threading.CancellationToken)">
            <summary>
                Transfers a container from one ship to another.
            </summary>
            <param name="sourceShipId">The Id of the ship to have the container transferred from.</param>
            <param name="destinationShipId">The Id of the ship to have the container transferred to.</param>
            <param name="request">The request containing container data.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A result indicating the success regarding the load operation.</returns>
        </member>
        <member name="M:Fleet.Api.Features.Ships.Abstractions.IShipRepository.Create(Fleet.Api.Entities.Ship,System.Threading.CancellationToken)">
            <summary>
                Adds a new Ship to the database asynchronously.
            </summary>
            <param name="ship">The Ship to be added.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:Fleet.Api.Features.Ships.Abstractions.IShipRepository.Get(System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
                Retrieves a Ship by its Id with optional change tracking.
            </summary>
            <param name="shipId">The Id of the Ship to retrieve.</param>
            <param name="trackChanges">Indicates whether to track changes.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A task representing the asynchronous operation and the retrieved Ship.</returns>
        </member>
        <member name="M:Fleet.Api.Features.Ships.Abstractions.IShipRepository.Get(Fleet.Api.Shared.PaginationParams,System.Threading.CancellationToken)">
            <summary>
                Retrieves Ships with pagination support.
            </summary>
            <param name="paginationParams">Parameters for pagination.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A task representing the asynchronous operation and the paginated result of Ships.</returns>
        </member>
        <member name="M:Fleet.Api.Features.Ships.Abstractions.IShipRepository.Remove(Fleet.Api.Entities.Ship)">
            <summary>
                Removes a Ship from the database.
            </summary>
            <param name="ship">The Ship to be removed.</param>
        </member>
        <member name="M:Fleet.Api.Features.Ships.Abstractions.IShipRepository.IsNameUnique(System.String,System.Threading.CancellationToken)">
            <summary>
                Checks if a Ship name is unique in the database.
            </summary>
            <param name="shipName">The name to check for uniqueness.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A task representing the asynchronous operation and a boolean indicating the uniqueness of the name.</returns>
        </member>
        <member name="M:Fleet.Api.Features.Ships.Abstractions.IShipService.Create(Fleet.Api.Features.Ships.DTOs.CreateShipRequest,System.Threading.CancellationToken)">
            <summary>
                Creates a new ship based on the provided request.
            </summary>
            <param name="request">The request containing ship data.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A result indicating the success and the Id of the created ship.</returns>
        </member>
        <member name="M:Fleet.Api.Features.Ships.Abstractions.IShipService.Get(System.Int32,System.Threading.CancellationToken)">
            <summary>
                Retrieves ship details by Id.
            </summary>
            <param name="shipId">The Id of the ship to retrieve.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A result indicating the success and the response containing ship details.</returns>
        </member>
        <member name="M:Fleet.Api.Features.Ships.Abstractions.IShipService.Get(Fleet.Api.Shared.PaginationParams,System.Threading.CancellationToken)">
            <summary>
                Retrieves a paginated list of ships.
            </summary>
            <param name="paginationParams">Parameters for pagination.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A result indicating the success and the paginated response of ship details.</returns>
        </member>
        <member name="M:Fleet.Api.Features.Ships.Abstractions.IShipService.Delete(System.Int32,System.Threading.CancellationToken)">
            <summary>
                Deletes a ship by Id.
            </summary>
            <param name="shipId">The Id of the ship to delete.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A result indicating the success of the deletion operation.</returns>
        </member>
        <member name="T:Fleet.Api.Features.Ships.Implementations.ShipContainerRepository">
            <summary>
                Repository for handling Ship Container entities in the database.
            </summary>
        </member>
        <member name="M:Fleet.Api.Features.Ships.Implementations.ShipContainerRepository.#ctor(Fleet.Api.Database.ApplicationDbContext)">
            <summary>
                Initializes a new instance of the ShipContainerRepository class.
            </summary>
            <param name="db">The application database context.</param>
        </member>
        <member name="T:Fleet.Api.Features.Ships.Implementations.ShipContainerService">
            <summary>
                Service for managing Ship entities and handling related operations.
            </summary>
        </member>
        <member name="M:Fleet.Api.Features.Ships.Implementations.ShipContainerService.#ctor(Fleet.Api.Features.Ships.Abstractions.IShipRepository,Fleet.Api.Infrastructure.IUnitOfWork,Fleet.Api.Features.Containers.Abstractions.IContainerRepository,Fleet.Api.Features.Ships.Abstractions.IShipContainerRepository,Fleet.Api.Features.Trucks.Abstractions.ITruckContainerRepository)">
            <summary>
                Initializes a new instance of the ShipService class.
            </summary>
            <param name="shipRepository">Repository for ship data access.</param>
            <param name="unitOfWork">Unit of Work for managing transactions.</param>
            <param name="containerRepository">Repository for container data access.</param>
            <param name="shipContainerRepository">Repository for ship container data access.</param>
        </member>
        <member name="M:Fleet.Api.Features.Ships.Implementations.ShipContainerService.Load(System.Int32,Fleet.Api.Features.Ships.DTOs.LoadShipRequest,System.Threading.CancellationToken)">
            <summary>
                Loads an existing ship with the provided container.
            </summary>
            <param name="shipId">The Id of the ship to have the provided container loaded.</param>
            <param name="request">The request containing container data.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A result indicating the success regarding the load operation.</returns>
        </member>
        <member name="M:Fleet.Api.Features.Ships.Implementations.ShipContainerService.ValidateLoadRequest(System.Int32,Fleet.Api.Features.Ships.DTOs.LoadShipRequest,System.Threading.CancellationToken)">
            <summary>
                Validates the request for loading a ship with a container.
            </summary>
            <param name="shipId">The Id of the ship that will load the provided container.</param>
            <param name="request">The request containing container data.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A result indicating the success or failure of the validation.</returns>
        </member>
        <member name="M:Fleet.Api.Features.Ships.Implementations.ShipContainerService.ValidateUnloadRequest(System.Int32,Fleet.Api.Features.Ships.DTOs.UnloadShipRequest,System.Threading.CancellationToken)">
            <summary>
                Validates the request for unloading a ship with a container.
            </summary>
            <param name="shipId">The Id of the ship that will unload the provided container.</param>
            <param name="request">The request containing container data.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A result indicating the success or failure of the validation.</returns>
        </member>
        <member name="T:Fleet.Api.Features.Ships.Implementations.ShipRepository">
            <summary>
                Repository for handling Ship entities in the database.
            </summary>
        </member>
        <member name="M:Fleet.Api.Features.Ships.Implementations.ShipRepository.#ctor(Fleet.Api.Database.ApplicationDbContext)">
            <summary>
                Initializes a new instance of the ShipRepository class.
            </summary>
            <param name="db">The application database context.</param>
        </member>
        <member name="T:Fleet.Api.Features.Ships.Implementations.ShipService">
            <summary>
                Service responsible for managing Ship entities and handling related operations.
            </summary>
        </member>
        <member name="F:Fleet.Api.Features.Ships.Implementations.ShipService.ShipNameMaximumLength">
            <summary>
                Maximum length allowed for a ship name.
            </summary>
        </member>
        <member name="F:Fleet.Api.Features.Ships.Implementations.ShipService.ShipMaximumCapacity">
            <summary>
                Maximum number of containers allowed for a ship to hold.
            </summary>
        </member>
        <member name="M:Fleet.Api.Features.Ships.Implementations.ShipService.#ctor(Fleet.Api.Features.Ships.Abstractions.IShipRepository,Fleet.Api.Infrastructure.IUnitOfWork,AutoMapper.IMapper)">
            <summary>
                Initializes a new instance of the ShipService class.
            </summary>
            <param name="shipRepository">Repository for ship data access.</param>
            <param name="unitOfWork">Unit of Work for managing transactions.</param>
            <param name="mapper">Mapper for DTO transformations.</param>
        </member>
        <member name="M:Fleet.Api.Features.Ships.Implementations.ShipService.Create(Fleet.Api.Features.Ships.DTOs.CreateShipRequest,System.Threading.CancellationToken)">
            <summary>
                Creates a new ship based on the provided request.
            </summary>
            <param name="request">The request containing ship data.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A result indicating the success or failure of the create operation.</returns>
        </member>
        <member name="M:Fleet.Api.Features.Ships.Implementations.ShipService.Get(System.Int32,System.Threading.CancellationToken)">
            <summary>
                Gets details of a specific ship by its Id.
            </summary>
            <param name="shipId">The Id of the ship.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A result containing the ship details or an error if not found.</returns>
        </member>
        <member name="M:Fleet.Api.Features.Ships.Implementations.ShipService.Get(Fleet.Api.Shared.PaginationParams,System.Threading.CancellationToken)">
            <summary>
                Gets a paginated list of ships based on the provided parameters.
            </summary>
            <param name="paginationParams">Pagination parameters.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A result containing the paginated list of ships or an error if encountered.</returns>
        </member>
        <member name="M:Fleet.Api.Features.Ships.Implementations.ShipService.Delete(System.Int32,System.Threading.CancellationToken)">
            <summary>
                Deletes a ship by its Id.
            </summary>
            <param name="shipId">The Id of the ship to delete.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A result indicating the success or failure of the delete operation.</returns>
        </member>
        <member name="M:Fleet.Api.Features.Ships.Implementations.ShipService.ValidateCreateRequest(Fleet.Api.Features.Ships.DTOs.CreateShipRequest,System.Threading.CancellationToken)">
            <summary>
                Validates the create ship request.
            </summary>
            <param name="request">The request containing ship data.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A result indicating the success or failure of the validation.</returns>
        </member>
        <member name="M:Fleet.Api.Features.Ships.ShipsController.Create(Fleet.Api.Features.Ships.DTOs.CreateShipRequest,System.Threading.CancellationToken)">
            <summary>
                Creates a new ship with the provided details.
            </summary>
            <param name="request">The ship creation request.</param>
            <param name="ct">Cancellation token.</param>
            <response code="201">Returns the Id of the newly created Ship</response>
            <response code="400">
                When:
                <ul>
                    <li>the [Name] is null or empty</li>
                    <li>the [Name] exceeds 100 characters</li>
                    <li>the [Capacity] is out of bounds</li>
                    <li>the [Name] is already taken</li>
                </ul>
            </response>
        </member>
        <member name="M:Fleet.Api.Features.Ships.ShipsController.Get(System.Int32,System.Threading.CancellationToken)">
            <summary>
                Retrieves details of a specific ship by its identifier.
            </summary>
            <param name="shipId">The unique identifier of the ship.</param>
            <param name="ct">Cancellation token.</param>
            <response code="200">Returns the ship instance of the specified Id</response>
            <response code="404">If the ship does not exist</response>
        </member>
        <member name="M:Fleet.Api.Features.Ships.ShipsController.Get(Fleet.Api.Shared.PaginationParams,System.Threading.CancellationToken)">
            <summary>
                Retrieves a paginated list of ships.
            </summary>
            <param name="paginationParams">Pagination parameters.</param>
            <param name="ct">Cancellation token.</param>
            <response code="200">Returns the paginated list of ships</response>
        </member>
        <member name="M:Fleet.Api.Features.Ships.ShipsController.Delete(System.Int32,System.Threading.CancellationToken)">
            <summary>
                Deletes a ship by its identifier.
            </summary>
            <param name="shipId">The unique identifier of the ship to delete.</param>
            <param name="ct">Cancellation token.</param>
            <response code="200">Returns a success response upon successful deletion.</response>
            <response code="404">If the ship does not exist</response>
        </member>
        <member name="M:Fleet.Api.Features.Ships.ShipsController.Load(System.Int32,Fleet.Api.Features.Ships.DTOs.LoadShipRequest,System.Threading.CancellationToken)">
            <summary>
                Loads an existing ship with the provided container.
            </summary>
            <param name="shipId">The Id of the ship to have the provided container loaded.</param>
            <param name="request">The request containing container data.</param>
            <param name="ct">Cancellation token.</param>
            <response code="201">Returns the Id of the newly loaded container on the ship</response>
            <response code="400">
                When:
                <ul>
                    <li>the [Container] is already loaded in another ship</li>
                    <li>the [Ship] is already full</li>
                </ul>
            </response>
            <response code="404">
                When:
                <ul>
                    <li>the [ContainerId] is not found</li>
                </ul>
            </response>
        </member>
        <member name="M:Fleet.Api.Features.Ships.ShipsController.Unload(System.Int32,Fleet.Api.Features.Ships.DTOs.UnloadShipRequest,System.Threading.CancellationToken)">
            <summary>
                Unloads a container from a ship.
            </summary>
            <param name="shipId">The Id of the ship to unload the provided container from.</param>
            <param name="request">The request containing container data.</param>
            <param name="ct">Cancellation token.</param>
            <response code="200">Returns a success response upon successful unloading.</response>
            <response code="400">
                When:
                <ul>
                    <li>the [ContainerId] is not loaded in the ship</li>
                </ul>
            </response>
            <response code="404">
                When:
                <ul>
                    <li>the [ContainerId] is not found</li>
                </ul>
            </response>
        </member>
        <member name="M:Fleet.Api.Features.Ships.ShipsController.Transfer(System.Int32,System.Int32,Fleet.Api.Shared.Requests.TransferContainerRequest,System.Threading.CancellationToken)">
            <summary>
                Transfers a container from one ship to another.
            </summary>
            <param name="sourceShipId">The Id of the source ship.</param>
            <param name="destinationShipId">The Id of the destination ship.</param>
            <param name="request">The request containing container data.</param>
            <param name="ct">Cancellation token.</param>
            <response code="201">Returns the Id of the newly transferred container on the destination ship</response>
            <response code="400">
                When:
                <ul>
                    <li>the [ContainerId] not loaded in the source ship</li>
                    <li>the [Container] is already in the destination ship</li>
                    <li>the [DestinationShip] is already full</li>
                </ul>
            </response>
            <response code="404">
                When:
                <ul>
                    <li>the [SourceShipId] or [DestinationShipId] is not found</li>
                    <li>the [ContainerId] is not found</li>
                </ul>
            </response>
        </member>
        <member name="M:Fleet.Api.Features.Trucks.Abstractions.ITruckContainerRepository.Create(Fleet.Api.Entities.TruckContainer,System.Threading.CancellationToken)">
            <summary>
                Adds a new Truck Container to the database asynchronously.
            </summary>
            <param name="truckContainer">The Truck Container to be added.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:Fleet.Api.Features.Trucks.Abstractions.ITruckContainerRepository.CountContainersByTruckId(System.Int32,System.Threading.CancellationToken)">
            <summary>
                Retrieves the Truck Containers of the provided truckId from the database asynchronously.
            </summary>
            <param name="truckId">The Truck to have its containers fetched.</param>
            <param name="ct">Cancellation token.</param>
            <returns>
                A task representing the asynchronous operation containing a list of the
                containers that are loaded on the provided truckId.
            </returns>
        </member>
        <member name="M:Fleet.Api.Features.Trucks.Abstractions.ITruckContainerRepository.Get(System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
                Retrieves the Truck Container based on the provided containerId
            </summary>
            <param name="containerId">The Id of the Container to be searched.</param>
            <param name="trackChanges">Indicates whether to track changes.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A task representing the asynchronous operation including the Truck Container (if found).</returns>
        </member>
        <member name="M:Fleet.Api.Features.Trucks.Abstractions.ITruckContainerRepository.GetLatestLoaded(System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
                Retrieves the Truck's latest loaded Container.
            </summary>
            <param name="truckId">The Id of the Truck whose latest loaded container we are interested.</param>
            <param name="trackChanges">Indicates whether to track changes.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A task representing the asynchronous operation including the Truck Container (if found).</returns>
        </member>
        <member name="M:Fleet.Api.Features.Trucks.Abstractions.ITruckContainerRepository.Remove(Fleet.Api.Entities.TruckContainer)">
            <summary>
                Removes a Truck Container from the database.
            </summary>
            <param name="truckContainer">The Truck Container to be removed.</param>
        </member>
        <member name="M:Fleet.Api.Features.Trucks.Abstractions.ITruckContainerService.Load(System.Int32,Fleet.Api.Features.Trucks.DTOs.LoadTruckRequest,System.Threading.CancellationToken)">
            <summary>
                Loads an existing truck with the provided container.
            </summary>
            <param name="truckId">The truck Id to have the provided container loaded.</param>
            <param name="request">The request containing container data.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A result indicating the success regarding the load operation.</returns>
        </member>
        <member name="M:Fleet.Api.Features.Trucks.Abstractions.ITruckContainerService.Unload(System.Int32,Fleet.Api.Features.Trucks.DTOs.UnloadTruckRequest,System.Threading.CancellationToken)">
            <summary>
                Unloads the provided container from an existing truck.
            </summary>
            <param name="truckId">The truck Id to have the provided container unloaded.</param>
            <param name="request">The request containing container data.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A result indicating the success regarding the unload operation.</returns>
        </member>
        <member name="M:Fleet.Api.Features.Trucks.Abstractions.ITruckContainerService.Transfer(System.Int32,System.Int32,Fleet.Api.Shared.Requests.TransferContainerRequest,System.Threading.CancellationToken)">
            <summary>
                Transfers a container from one truck to another.
            </summary>
            <param name="sourceTruckId">The Id of the truck to have the container transferred from.</param>
            <param name="destinationTruckId">The Id of the truck to have the container transferred to.</param>
            <param name="request">The request containing container data.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A result indicating the success regarding the load operation.</returns>
        </member>
        <member name="M:Fleet.Api.Features.Trucks.Abstractions.ITruckRepository.Create(Fleet.Api.Entities.Truck,System.Threading.CancellationToken)">
            <summary>
                Adds a new Truck to the database asynchronously.
            </summary>
            <param name="truck">The Truck to be added.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:Fleet.Api.Features.Trucks.Abstractions.ITruckRepository.Get(System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
                Retrieves a Truck by its Id with optional change tracking.
            </summary>
            <param name="truckId">The Id of the Truck to retrieve.</param>
            <param name="trackChanges">Indicates whether to track changes.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A task representing the asynchronous operation and the retrieved Truck.</returns>
        </member>
        <member name="M:Fleet.Api.Features.Trucks.Abstractions.ITruckRepository.Get(Fleet.Api.Shared.PaginationParams,System.Threading.CancellationToken)">
            <summary>
                Retrieves Trucks with pagination support.
            </summary>
            <param name="paginationParams">Parameters for pagination.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A task representing the asynchronous operation and the paginated result of Trucks.</returns>
        </member>
        <member name="M:Fleet.Api.Features.Trucks.Abstractions.ITruckRepository.Remove(Fleet.Api.Entities.Truck)">
            <summary>
                Removes a Truck from the database.
            </summary>
            <param name="truck">The Truck to be removed.</param>
        </member>
        <member name="M:Fleet.Api.Features.Trucks.Abstractions.ITruckRepository.IsNameUnique(System.String,System.Threading.CancellationToken)">
            <summary>
                Checks if a Truck name is unique in the database.
            </summary>
            <param name="truckName">The name to check for uniqueness.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A task representing the asynchronous operation and a boolean indicating the uniqueness of the name.</returns>
        </member>
        <member name="M:Fleet.Api.Features.Trucks.Abstractions.ITruckService.Create(Fleet.Api.Features.Trucks.DTOs.CreateTruckRequest,System.Threading.CancellationToken)">
            <summary>
                Creates a new truck based on the provided request.
            </summary>
            <param name="request">The request containing truck data.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A result indicating the success and the Id of the created truck.</returns>
        </member>
        <member name="M:Fleet.Api.Features.Trucks.Abstractions.ITruckService.Get(System.Int32,System.Threading.CancellationToken)">
            <summary>
                Retrieves truck details by Id.
            </summary>
            <param name="truckId">The Id of the truck to retrieve.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A result indicating the success and the response containing truck details.</returns>
        </member>
        <member name="M:Fleet.Api.Features.Trucks.Abstractions.ITruckService.Get(Fleet.Api.Shared.PaginationParams,System.Threading.CancellationToken)">
            <summary>
                Retrieves a paginated list of trucks.
            </summary>
            <param name="paginationParams">Parameters for pagination.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A result indicating the success and the paginated response of truck details.</returns>
        </member>
        <member name="M:Fleet.Api.Features.Trucks.Abstractions.ITruckService.Delete(System.Int32,System.Threading.CancellationToken)">
            <summary>
                Deletes a truck by Id.
            </summary>
            <param name="truckId">The Id of the truck to delete.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A result indicating the success of the deletion operation.</returns>
        </member>
        <member name="T:Fleet.Api.Features.Trucks.Implementations.TruckContainerRepository">
            <summary>
                Repository for handling Truck Container entities in the database.
            </summary>
        </member>
        <member name="M:Fleet.Api.Features.Trucks.Implementations.TruckContainerRepository.#ctor(Fleet.Api.Database.ApplicationDbContext)">
            <summary>
                Initializes a new instance of the TruckContainerRepository class.
            </summary>
            <param name="db">The application database context.</param>
        </member>
        <member name="T:Fleet.Api.Features.Trucks.Implementations.TruckContainerService">
            <summary>
                Service for managing Truck entities and handling related operations.
            </summary>
        </member>
        <member name="M:Fleet.Api.Features.Trucks.Implementations.TruckContainerService.#ctor(Fleet.Api.Features.Trucks.Abstractions.ITruckRepository,Fleet.Api.Infrastructure.IUnitOfWork,Fleet.Api.Features.Containers.Abstractions.IContainerRepository,Fleet.Api.Features.Trucks.Abstractions.ITruckContainerRepository,Fleet.Api.Features.Ships.Abstractions.IShipContainerRepository)">
            <summary>
                Initializes a new instance of the TruckService class.
            </summary>
            <param name="truckRepository">Repository for truck data access.</param>
            <param name="unitOfWork">Unit of Work for managing transactions.</param>
            <param name="containerRepository">Repository for container data access.</param>
            <param name="truckContainerRepository">Repository for truck container data access.</param>
        </member>
        <member name="M:Fleet.Api.Features.Trucks.Implementations.TruckContainerService.Load(System.Int32,Fleet.Api.Features.Trucks.DTOs.LoadTruckRequest,System.Threading.CancellationToken)">
            <summary>
                Loads an existing truck with the provided container.
            </summary>
            <param name="truckId">The Id of the truck to have the provided container loaded.</param>
            <param name="request">The request containing container data.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A result indicating the success regarding the load operation.</returns>
        </member>
        <member name="M:Fleet.Api.Features.Trucks.Implementations.TruckContainerService.ValidateLoadRequest(System.Int32,Fleet.Api.Features.Trucks.DTOs.LoadTruckRequest,System.Threading.CancellationToken)">
            <summary>
                Validates the request for loading a truck with a container.
            </summary>
            <param name="truckId">The Id of the truck that will load the provided container.</param>
            <param name="request">The request containing container data.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A result indicating the success or failure of the validation.</returns>
        </member>
        <member name="M:Fleet.Api.Features.Trucks.Implementations.TruckContainerService.ValidateUnloadRequest(System.Int32,Fleet.Api.Features.Trucks.DTOs.UnloadTruckRequest,System.Threading.CancellationToken)">
            <summary>
                Validates the request for unloading a truck with a container.
            </summary>
            <param name="truckId">The Id of the truck that will unload the provided container.</param>
            <param name="request">The request containing container data.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A result indicating the success or failure of the validation.</returns>
        </member>
        <member name="T:Fleet.Api.Features.Trucks.Implementations.TruckRepository">
            <summary>
                Repository for handling Truck entities in the database.
            </summary>
        </member>
        <member name="M:Fleet.Api.Features.Trucks.Implementations.TruckRepository.#ctor(Fleet.Api.Database.ApplicationDbContext)">
            <summary>
                Initializes a new instance of the TruckRepository class.
            </summary>
            <param name="db">The application database context.</param>
        </member>
        <member name="T:Fleet.Api.Features.Trucks.Implementations.TruckService">
            <summary>
                Service responsible for managing Truck entities and handling related operations.
            </summary>
        </member>
        <member name="F:Fleet.Api.Features.Trucks.Implementations.TruckService.TruckNameMaximumLength">
            <summary>
                Maximum length allowed for a truck name.
            </summary>
        </member>
        <member name="F:Fleet.Api.Features.Trucks.Implementations.TruckService.TruckMaximumCapacity">
            <summary>
                Maximum number of containers allowed for a truck to hold.
            </summary>
        </member>
        <member name="M:Fleet.Api.Features.Trucks.Implementations.TruckService.#ctor(Fleet.Api.Features.Trucks.Abstractions.ITruckRepository,Fleet.Api.Infrastructure.IUnitOfWork,AutoMapper.IMapper)">
            <summary>
                Initializes a new instance of the TruckService class.
            </summary>
            <param name="truckRepository">Repository for truck data access.</param>
            <param name="unitOfWork">Unit of Work for managing transactions.</param>
            <param name="mapper">Mapper for DTO transformations.</param>
        </member>
        <member name="M:Fleet.Api.Features.Trucks.Implementations.TruckService.Create(Fleet.Api.Features.Trucks.DTOs.CreateTruckRequest,System.Threading.CancellationToken)">
            <summary>
                Creates a new truck based on the provided request.
            </summary>
            <param name="request">The request containing truck data.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A result indicating the success or failure of the create operation.</returns>
        </member>
        <member name="M:Fleet.Api.Features.Trucks.Implementations.TruckService.Get(System.Int32,System.Threading.CancellationToken)">
            <summary>
                Gets details of a specific truck by its Id.
            </summary>
            <param name="truckId">The Id of the truck.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A result containing the truck details or an error if not found.</returns>
        </member>
        <member name="M:Fleet.Api.Features.Trucks.Implementations.TruckService.Get(Fleet.Api.Shared.PaginationParams,System.Threading.CancellationToken)">
            <summary>
                Gets a paginated list of trucks based on the provided parameters.
            </summary>
            <param name="paginationParams">Pagination parameters.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A result containing the paginated list of trucks or an error if encountered.</returns>
        </member>
        <member name="M:Fleet.Api.Features.Trucks.Implementations.TruckService.Delete(System.Int32,System.Threading.CancellationToken)">
            <summary>
                Deletes a truck by its Id.
            </summary>
            <param name="truckId">The Id of the truck to delete.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A result indicating the success or failure of the delete operation.</returns>
        </member>
        <member name="M:Fleet.Api.Features.Trucks.Implementations.TruckService.ValidateCreateRequest(Fleet.Api.Features.Trucks.DTOs.CreateTruckRequest,System.Threading.CancellationToken)">
            <summary>
                Validates the create truck request.
            </summary>
            <param name="request">The request containing truck data.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A result indicating the success or failure of the validation.</returns>
        </member>
        <member name="T:Fleet.Api.Migrations.Merge_Migrations">
            <inheritdoc />
        </member>
        <member name="M:Fleet.Api.Migrations.Merge_Migrations.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Fleet.Api.Migrations.Merge_Migrations.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Fleet.Api.Migrations.Merge_Migrations.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Fleet.Api.Migrations.Add_CascadeBehavior">
            <inheritdoc />
        </member>
        <member name="M:Fleet.Api.Migrations.Add_CascadeBehavior.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Fleet.Api.Migrations.Add_CascadeBehavior.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Fleet.Api.Migrations.Add_CascadeBehavior.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Fleet.Api.Migrations.Rename_To_MaxiumCapacity">
            <inheritdoc />
        </member>
        <member name="M:Fleet.Api.Migrations.Rename_To_MaxiumCapacity.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Fleet.Api.Migrations.Rename_To_MaxiumCapacity.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Fleet.Api.Migrations.Rename_To_MaxiumCapacity.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:TrucksController">
            <summary>
                Controller for managing Truck entities and related operations.
            </summary>
        </member>
        <member name="M:TrucksController.#ctor(Fleet.Api.Features.Trucks.Abstractions.ITruckService,Fleet.Api.Features.Trucks.Abstractions.ITruckContainerService)">
            <summary>
                Initializes a new instance of the TrucksController class.
            </summary>
            <param name="truckService">Service for managing trucks.</param>
            <param name="truckContainerService">Service for managing truck containers.</param>
        </member>
        <member name="M:TrucksController.Create(Fleet.Api.Features.Trucks.DTOs.CreateTruckRequest,System.Threading.CancellationToken)">
            <summary>
                Creates a new truck with the provided details.
            </summary>
            <param name="request">The truck creation request.</param>
            <param name="ct">Cancellation token.</param>
            <response code="201">Returns the Id of the newly created Truck</response>
            <response code="400">
                When:
                <ul>
                    <li>the [Name] is null or empty</li>
                    <li>the [Name] exceeds 100 characters</li>
                    <li>the [Capacity] is out of bounds</li>
                    <li>the [Name] is already taken</li>
                </ul>
            </response>
        </member>
        <member name="M:TrucksController.Get(System.Int32,System.Threading.CancellationToken)">
            <summary>
                Gets details of a specific truck by its Id.
            </summary>
            <param name="truckId">The Id of the truck.</param>
            <param name="ct">Cancellation token.</param>
            <returns>Action result containing the truck details.</returns>
            <response code="200">Returns the truck instance of the specified Id</response>
            <response code="404">If the truck does not exist</response>
        </member>
        <member name="M:TrucksController.Get(Fleet.Api.Shared.PaginationParams,System.Threading.CancellationToken)">
            <summary>
                Retrieves a paginated list of trucks.
            </summary>
            <param name="paginationParams">Pagination parameters.</param>
            <param name="ct">Cancellation token.</param>
            <response code="200">Returns the paginated list of trucks</response>
        </member>
        <member name="M:TrucksController.Delete(System.Int32,System.Threading.CancellationToken)">
            <summary>
                Deletes a truck by its Id.
            </summary>
            <param name="truckId">The Id of the truck to delete.</param>
            <param name="ct">Cancellation token.</param>
            <returns>Action result indicating the success or failure of the operation.</returns>
            <response code="200">Returns a success response upon successful deletion.</response>
            <response code="404">If the truck does not exist</response>
        </member>
        <member name="M:TrucksController.Load(System.Int32,Fleet.Api.Features.Trucks.DTOs.LoadTruckRequest,System.Threading.CancellationToken)">
            <summary>
                Loads a truck with the provided container.
            </summary>
            <param name="truckId">The Id of the truck to load the container onto.</param>
            <param name="request">The request containing container data.</param>
            <param name="ct">Cancellation token.</param>
            <returns>Action result indicating the success or failure of the operation.</returns>
            <response code="201">Returns the Id of the newly loaded container on the ship</response>
            <response code="400">
                When:
                <ul>
                    <li>the [Container] is already loaded in another ship</li>
                    <li>the [Truck] is already full</li>
                </ul>
            </response>
            <response code="404">
                When:
                <ul>
                    <li>the [ContainerId] is not found</li>
                    <li>the [TruckId] is not found</li>
                </ul>
            </response>
        </member>
        <member name="M:TrucksController.Unload(System.Int32,Fleet.Api.Features.Trucks.DTOs.UnloadTruckRequest,System.Threading.CancellationToken)">
            <summary>
                Unloads a truck with the provided container.
            </summary>
            <param name="truckId">The Id of the truck to unload the container from.</param>
            <param name="request">The request containing container data.</param>
            <param name="ct">Cancellation token.</param>
            <returns>Action result indicating the success or failure of the operation.</returns>
            <response code="200">Returns a success response upon successful unloading.</response>
            <response code="400">
                When:
                <ul>
                    <li>the [ContainerId] is not loaded in the ship</li>
                    <li>the [TruckId] is empty</li>
                    <li>the [TruckId] is not unloading its latest container</li>
                </ul>
            </response>
            <response code="404">
                When:
                <ul>
                    <li>the [ContainerId] is not found</li>
                </ul>
            </response>
        </member>
        <member name="M:TrucksController.Transfer(System.Int32,System.Int32,Fleet.Api.Shared.Requests.TransferContainerRequest,System.Threading.CancellationToken)">
            <summary>
                Transfers a container from one truck to another.
            </summary>
            <param name="sourceTruckId">The Id of the source truck.</param>
            <param name="destinationTruckId">The Id of the destination truck.</param>
            <param name="request">The request containing container data.</param>
            <param name="ct">Cancellation token.</param>
            <returns>Action result indicating the success or failure of the operation.</returns>
            <response code="201">Returns the Id of the newly transferred container on the destination ship</response>
            <response code="400">
                When:
                <ul>
                    <li>the [ContainerId] not loaded in the source ship</li>
                    <li>the [Container] is already in the destination ship</li>
                    <li>the [DestinationTruck] is already full</li>
                    <li>the [SourceTruckId] is not transferring/unloading its latest container</li>
                </ul>
            </response>
            <response code="404">
                When:
                <ul>
                    <li>the [SourceTruckId] or [DestinationTruckId] is not found</li>
                    <li>the [ContainerId] is not found</li>
                </ul>
            </response>
        </member>
    </members>
</doc>
